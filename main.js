import srtParser2 from 'srt-parser-2'

const clipboard = new ClipboardJS('#copy');

clipboard.on('success', function (e) {
  log('复制成功')
});
clipboard.on('error', function (e) {
  log('复制失败')
});

document.getElementById('go').addEventListener('click', () => {
  let srt = document.getElementById('srt').value;
  if (srt !== '') {
    let ass = srtToAss(srt, document.getElementById('style').value);
    document.getElementById('ass').value = ass;
  } else {
    log('请填入 SRT 字幕正文')
  }
})

function log(log) {
  document.getElementById('log').insertAdjacentHTML('afterbegin', log + '<br>')
  console.log(log)
}

function srtToAss(srt, style) {
  if (style == '' || style == undefined) {
    style = 'Top'
  }

  const parser = new srtParser2(); // 新建一个解析器
  // log(srt);

  let parsedSrt = parser.fromSrt(srt) // 解析srt

  /*
      第一步解析：把每个srt字幕的时间和内容转为一个新对象插入数组，
      若这个srt字幕包含换行符号，则将这个srt字幕的内容每行拆开，将每行用分别用相同时间的新对象插入数组
  
      Step1: make a new object which contains the time and content of each srt line,
      then insert the new object into the array. if the srt line contains \n,
      then split the srt line into several lines, and insert the new object into the array (each line has same time)
  */

  let newSubtitleArray1 = new Array();

  for (let i in parsedSrt) {
    if (parsedSrt[i].text.includes("\n")) { // 如果这个srt字幕包含换行符号
      let lines = parsedSrt[i].text.split("\n"); // 拆分srt字幕
      for (let j in lines) { // 循环每行
        let newSubtitle = {
          startTime: parsedSrt[i].startTime, // 引用原来的时间
          endTime: parsedSrt[i].endTime,
          text: lines[j], // 被分割的这一行
          style: 'Default'
        };
        newSubtitleArray1.push(newSubtitle);
      }
    } else {
      let thisSrtLine = {
        startTime: parsedSrt[i].startTime,
        endTime: parsedSrt[i].endTime,
        text: parsedSrt[i].text,
        style: 'Default'
      }
      newSubtitleArray1.push(thisSrtLine);
    }
  }

  /*
      第二步解析：合并字幕，遍历所有字幕，即父遍历；父遍历下进行子遍历，也遍历所有字幕。
      如果子遍历字幕的开始时间和当前父遍历字幕的结束时间相同，且他们的内容一样，则将他们合并，
      避免重复字幕出现。
  */

  for (let i in newSubtitleArray1) { // 父遍历
    for (let j = 0; j < newSubtitleArray1.length; j++) { // 子遍历
      if (newSubtitleArray1[j].startTime == newSubtitleArray1[i].endTime && newSubtitleArray1[j].text == newSubtitleArray1[i].text) { // 如果子遍历字幕的开始时间和当前父遍历字幕的结束时间相同，且他们的内容一样，则将他们合并
        log(`[行 ${i} ==> ${j}] ${newSubtitleArray1[j].text} (${newSubtitleArray1[i].endTime} ==> ${newSubtitleArray1[j].endTime})`);
        newSubtitleArray1[i].endTime = newSubtitleArray1[j].endTime; // 将子遍历字幕的结束时间赋值给父遍历字幕
        newSubtitleArray1.splice(j, 1); // 删除子遍历字幕
        j = j - 1; // 子遍历字幕的索引减一
      }
    }
  }

  for (let i in newSubtitleArray1) {
    if (newSubtitleArray1[i].text.startsWith('(') && newSubtitleArray1[i].text.endsWith(')') || newSubtitleArray1[i].text.startsWith('（') && newSubtitleArray1[i].text.endsWith('）')) {
      log(`[行 ${i}] ${newSubtitleArray1[i].text} 更换为 ${style} 样式`);
      newSubtitleArray1[i].style = style;
    }
  }

  // log(JSON.stringify(newSubtitleArray1));

  /*
      第三步：生成 ASS 文件
  */

  let nowTime = new Date(); // 获取当前时间
  let nowTimeText = `${nowTime.toLocaleString("zh-CN", { hour12: false })} (${nowTime.getTime()})`
  let ass =
    `[Script Info]
; Script generated by LavaAnimeSubTools
; Generate time: ${nowTimeText}
Title: New Subtitle
Original Script: LavaAnimeSubTools
ScriptType: v4.00+
WrapStyle: 0
ScaledBorderAndShadow: yes
PlayResX: 1920
PlayResY: 1080

[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
Style: Default,ZhunYuan,64,&H00FFFFFF,&H00FFFFFF,&H002A2A2A,&HFF0E0807,0,0,0,0,100,100,1,0,1,3.1,0,2,135,135,32,1
Style: ${style},阿里巴巴普惠体 B,64,&H00FFFFFF,&H00FFFFFF,&H00BD3B24,&HFF0E0807,0,0,0,0,100,100,1,0,1,3.1,0,8,135,135,20,1

[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
`

  for (let i in newSubtitleArray1) {
    let thisStartTime = newSubtitleArray1[i].startTime.slice(1, 11).replace(',', '.');
    let thisEndTime = newSubtitleArray1[i].endTime.slice(1, 11).replace(',', '.');
    let thisAssLine =
      `Dialogue: 0,${thisStartTime},${thisEndTime},${newSubtitleArray1[i].style},,0,0,0,,${newSubtitleArray1[i].text}`
    ass = ass + thisAssLine + '\n';
  }

  if (newSubtitleArray1.length == 0) {
    log('没有可以转换的字幕，请检查 SRT 内容！');
    return '';
  } else {
    return ass;
  }
  // log(ass);
}